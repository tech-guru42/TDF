syntax = "proto3";

package attributes;

import "buf/validate/validate.proto";
import "common/common.proto";
import "google/api/annotations.proto";

message Attribute {
  // Namespace namespace = 1;
  AttributeDefinition definition = 1;
  AttributeDefinitionValue value = 2;
}

// Attribute Definition
message AttributeDefinition {
  enum AttributeRuleType {
    UNSPECIFIED = 0;
    ALL_OF = 1;
    ANY_OF = 2;
    HIERARCHY = 3;
  }
  // Optional metadata for the attribute definition
  common.PolicyMetadata metadata = 1;

  // generated uuid in database
  string id = 2;

  // namespace of the attribute
  string namespace_id = 3 [(buf.validate.field).required = true];

  //attribute name
  string name = 4 [(buf.validate.field).required = true];

  // attribute rule enum
  AttributeRuleType rule = 5 [
    (buf.validate.field).enum.defined_only = true,
    (buf.validate.field).required = true
  ];
}

// Definition of a single attribute value
message AttributeDefinitionValue {
  common.PolicyMetadata metadata = 1;

  // generated uuid in database
  string id = 2;

  string attribute_definition_id = 3 [(buf.validate.field).required = true];

  string value = 4;

  // list of attribute values that this value is related to (attribute group)
  repeated string members = 5;

  //TODO - optional lock down pub key format if needed.  Per ATTR KEY?
  string attribute_public_key = 6;
}

message AttributeDefinitionKeyAccessGrant {
  string attribute_definition_id = 1;
  string key_access_servers_id = 2;
}

message AttributeValueKeyAccessGrant {
  string attribute_value_id = 1;
  string key_access_servers_id = 2;
}

/*
   Attribute Service Definitions
*/

message GetAttributeRequest {
  string id = 1 [(buf.validate.field).required = true];
}
message GetAttributeResponse {
  Attribute attribute = 1;
}

message ListAttributesRequest {}

message ListAttributesResponse {
  repeated Attribute attributes = 1;
}

message CreateAttributeDefinitionRequest {
  AttributeDefinition definition = 1 [(buf.validate.field).required = true];
}
message CreateAttributeDefinitionResponse {}

message UpdateAttributeDefinitionRequest {
  string id = 1 [(buf.validate.field).required = true];
  AttributeDefinition definition = 2 [(buf.validate.field).required = true];
}
message UpdateAttributeResponse {}

message DeleteAttributeRequest {
  int32 id = 1 [(buf.validate.field).required = true];
}
message DeleteAttributeResponse {}

message GetAttributeGroupRequest {
  int32 id = 1 [(buf.validate.field).required = true];
}

message GetAttributeGroupResponse {
  AttributeGroup group = 1;
}

message ListAttributeGroupsRequest {
  common.ResourceSelector selector = 1;
}

message ListAttributeGroupsResponse {
  repeated AttributeGroup groups = 1;
}

message CreateAttributeGroupRequest {
  AttributeGroup group = 1 [(buf.validate.field).required = true];
}

message CreateAttributeGroupResponse {}

message UpdateAttributeGroupRequest {
  int32 id = 1 [(buf.validate.field).required = true];
  AttributeGroup group = 2 [(buf.validate.field).required = true];
}
message UpdateAttributeGroupResponse {}

message DeleteAttributeGroupRequest {
  int32 id = 1 [(buf.validate.field).required = true];
}
message DeleteAttributeGroupResponse {}

service AttributesService {
  rpc GetAttribute(GetAttributeRequest) returns (GetAttributeResponse) {
    option (google.api.http) = {get: "/v1/attribute/definitions/{id}"};
  }

  rpc GetAttributeGroup(GetAttributeGroupRequest) returns (GetAttributeGroupResponse) {
    option (google.api.http) = {get: "/v1/attribute/groups/{id}"};
  }

  rpc ListAttributes(ListAttributesRequest) returns (ListAttributesResponse) {
    option (google.api.http) = {get: "/v1/attribute/definitions"};
  }

  rpc ListAttributeGroups(ListAttributeGroupsRequest) returns (ListAttributeGroupsResponse) {
    option (google.api.http) = {get: "/v1/attribute/groups"};
  }

  rpc CreateAttribute(CreateAttributeRequest) returns (CreateAttributeResponse) {
    option (google.api.http) = {
      post: "/v1/attributes/definitions"
      body: "definition"
    };
  }

  rpc CreateAttributeGroup(CreateAttributeGroupRequest) returns (CreateAttributeGroupResponse) {
    option (google.api.http) = {
      post: "/v1/attributes/groups"
      body: "group"
    };
  }

  rpc UpdateAttribute(UpdateAttributeRequest) returns (UpdateAttributeResponse) {
    option (google.api.http) = {
      post: "/v1/attribute/definitions/{id}"
      body: "definition"
    };
  }

  rpc UpdateAttributeGroup(UpdateAttributeGroupRequest) returns (UpdateAttributeGroupResponse) {
    option (google.api.http) = {
      post: "/v1/attribute/groups/{id}"
      body: "group"
    };
  }

  rpc DeleteAttribute(DeleteAttributeRequest) returns (DeleteAttributeResponse) {
    option (google.api.http) = {delete: "/v1/attribute/definitions/{id}"};
  }

  rpc DeleteAttributeGroup(DeleteAttributeGroupRequest) returns (DeleteAttributeGroupResponse) {
    option (google.api.http) = {delete: "/v1/attribute/groups/{id}"};
  }
}
