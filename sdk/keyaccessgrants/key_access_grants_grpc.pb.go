// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: keyaccessgrants/key_access_grants.proto

package keyaccessgrants

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	KeyAccessServersService_ListKeyAccessServers_FullMethodName   = "/keyaccessgrants.KeyAccessServersService/ListKeyAccessServers"
	KeyAccessServersService_GetKeyAccessServer_FullMethodName     = "/keyaccessgrants.KeyAccessServersService/GetKeyAccessServer"
	KeyAccessServersService_CreateKeyAccessServers_FullMethodName = "/keyaccessgrants.KeyAccessServersService/CreateKeyAccessServers"
	KeyAccessServersService_UpdateKeyAccessServers_FullMethodName = "/keyaccessgrants.KeyAccessServersService/UpdateKeyAccessServers"
	KeyAccessServersService_DeleteKeyAccessServers_FullMethodName = "/keyaccessgrants.KeyAccessServersService/DeleteKeyAccessServers"
)

// KeyAccessServersServiceClient is the client API for KeyAccessServersService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KeyAccessServersServiceClient interface {
	ListKeyAccessServers(ctx context.Context, in *ListKeyAccessServersRequest, opts ...grpc.CallOption) (*ListKeyAccessServersResponse, error)
	GetKeyAccessServer(ctx context.Context, in *GetKeyAccessServerRequest, opts ...grpc.CallOption) (*GetKeyAccessServerResponse, error)
	CreateKeyAccessServers(ctx context.Context, in *CreateKeyAccessServerRequest, opts ...grpc.CallOption) (*CreateKeyAccessServerResponse, error)
	UpdateKeyAccessServers(ctx context.Context, in *UpdateKeyAccessServerRequest, opts ...grpc.CallOption) (*UpdateKeyAccessServerResponse, error)
	DeleteKeyAccessServers(ctx context.Context, in *DeleteKeyAccessServerRequest, opts ...grpc.CallOption) (*DeleteKeyAccessServerResponse, error)
}

type keyAccessServersServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewKeyAccessServersServiceClient(cc grpc.ClientConnInterface) KeyAccessServersServiceClient {
	return &keyAccessServersServiceClient{cc}
}

func (c *keyAccessServersServiceClient) ListKeyAccessServers(ctx context.Context, in *ListKeyAccessServersRequest, opts ...grpc.CallOption) (*ListKeyAccessServersResponse, error) {
	out := new(ListKeyAccessServersResponse)
	err := c.cc.Invoke(ctx, KeyAccessServersService_ListKeyAccessServers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyAccessServersServiceClient) GetKeyAccessServer(ctx context.Context, in *GetKeyAccessServerRequest, opts ...grpc.CallOption) (*GetKeyAccessServerResponse, error) {
	out := new(GetKeyAccessServerResponse)
	err := c.cc.Invoke(ctx, KeyAccessServersService_GetKeyAccessServer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyAccessServersServiceClient) CreateKeyAccessServers(ctx context.Context, in *CreateKeyAccessServerRequest, opts ...grpc.CallOption) (*CreateKeyAccessServerResponse, error) {
	out := new(CreateKeyAccessServerResponse)
	err := c.cc.Invoke(ctx, KeyAccessServersService_CreateKeyAccessServers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyAccessServersServiceClient) UpdateKeyAccessServers(ctx context.Context, in *UpdateKeyAccessServerRequest, opts ...grpc.CallOption) (*UpdateKeyAccessServerResponse, error) {
	out := new(UpdateKeyAccessServerResponse)
	err := c.cc.Invoke(ctx, KeyAccessServersService_UpdateKeyAccessServers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyAccessServersServiceClient) DeleteKeyAccessServers(ctx context.Context, in *DeleteKeyAccessServerRequest, opts ...grpc.CallOption) (*DeleteKeyAccessServerResponse, error) {
	out := new(DeleteKeyAccessServerResponse)
	err := c.cc.Invoke(ctx, KeyAccessServersService_DeleteKeyAccessServers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KeyAccessServersServiceServer is the server API for KeyAccessServersService service.
// All implementations must embed UnimplementedKeyAccessServersServiceServer
// for forward compatibility
type KeyAccessServersServiceServer interface {
	ListKeyAccessServers(context.Context, *ListKeyAccessServersRequest) (*ListKeyAccessServersResponse, error)
	GetKeyAccessServer(context.Context, *GetKeyAccessServerRequest) (*GetKeyAccessServerResponse, error)
	CreateKeyAccessServers(context.Context, *CreateKeyAccessServerRequest) (*CreateKeyAccessServerResponse, error)
	UpdateKeyAccessServers(context.Context, *UpdateKeyAccessServerRequest) (*UpdateKeyAccessServerResponse, error)
	DeleteKeyAccessServers(context.Context, *DeleteKeyAccessServerRequest) (*DeleteKeyAccessServerResponse, error)
	mustEmbedUnimplementedKeyAccessServersServiceServer()
}

// UnimplementedKeyAccessServersServiceServer must be embedded to have forward compatible implementations.
type UnimplementedKeyAccessServersServiceServer struct {
}

func (UnimplementedKeyAccessServersServiceServer) ListKeyAccessServers(context.Context, *ListKeyAccessServersRequest) (*ListKeyAccessServersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListKeyAccessServers not implemented")
}
func (UnimplementedKeyAccessServersServiceServer) GetKeyAccessServer(context.Context, *GetKeyAccessServerRequest) (*GetKeyAccessServerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKeyAccessServer not implemented")
}
func (UnimplementedKeyAccessServersServiceServer) CreateKeyAccessServers(context.Context, *CreateKeyAccessServerRequest) (*CreateKeyAccessServerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateKeyAccessServers not implemented")
}
func (UnimplementedKeyAccessServersServiceServer) UpdateKeyAccessServers(context.Context, *UpdateKeyAccessServerRequest) (*UpdateKeyAccessServerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateKeyAccessServers not implemented")
}
func (UnimplementedKeyAccessServersServiceServer) DeleteKeyAccessServers(context.Context, *DeleteKeyAccessServerRequest) (*DeleteKeyAccessServerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteKeyAccessServers not implemented")
}
func (UnimplementedKeyAccessServersServiceServer) mustEmbedUnimplementedKeyAccessServersServiceServer() {
}

// UnsafeKeyAccessServersServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KeyAccessServersServiceServer will
// result in compilation errors.
type UnsafeKeyAccessServersServiceServer interface {
	mustEmbedUnimplementedKeyAccessServersServiceServer()
}

func RegisterKeyAccessServersServiceServer(s grpc.ServiceRegistrar, srv KeyAccessServersServiceServer) {
	s.RegisterService(&KeyAccessServersService_ServiceDesc, srv)
}

func _KeyAccessServersService_ListKeyAccessServers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListKeyAccessServersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyAccessServersServiceServer).ListKeyAccessServers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeyAccessServersService_ListKeyAccessServers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyAccessServersServiceServer).ListKeyAccessServers(ctx, req.(*ListKeyAccessServersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyAccessServersService_GetKeyAccessServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKeyAccessServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyAccessServersServiceServer).GetKeyAccessServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeyAccessServersService_GetKeyAccessServer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyAccessServersServiceServer).GetKeyAccessServer(ctx, req.(*GetKeyAccessServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyAccessServersService_CreateKeyAccessServers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateKeyAccessServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyAccessServersServiceServer).CreateKeyAccessServers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeyAccessServersService_CreateKeyAccessServers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyAccessServersServiceServer).CreateKeyAccessServers(ctx, req.(*CreateKeyAccessServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyAccessServersService_UpdateKeyAccessServers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateKeyAccessServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyAccessServersServiceServer).UpdateKeyAccessServers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeyAccessServersService_UpdateKeyAccessServers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyAccessServersServiceServer).UpdateKeyAccessServers(ctx, req.(*UpdateKeyAccessServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyAccessServersService_DeleteKeyAccessServers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteKeyAccessServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyAccessServersServiceServer).DeleteKeyAccessServers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeyAccessServersService_DeleteKeyAccessServers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyAccessServersServiceServer).DeleteKeyAccessServers(ctx, req.(*DeleteKeyAccessServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// KeyAccessServersService_ServiceDesc is the grpc.ServiceDesc for KeyAccessServersService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KeyAccessServersService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "keyaccessgrants.KeyAccessServersService",
	HandlerType: (*KeyAccessServersServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListKeyAccessServers",
			Handler:    _KeyAccessServersService_ListKeyAccessServers_Handler,
		},
		{
			MethodName: "GetKeyAccessServer",
			Handler:    _KeyAccessServersService_GetKeyAccessServer_Handler,
		},
		{
			MethodName: "CreateKeyAccessServers",
			Handler:    _KeyAccessServersService_CreateKeyAccessServers_Handler,
		},
		{
			MethodName: "UpdateKeyAccessServers",
			Handler:    _KeyAccessServersService_UpdateKeyAccessServers_Handler,
		},
		{
			MethodName: "DeleteKeyAccessServers",
			Handler:    _KeyAccessServersService_DeleteKeyAccessServers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "keyaccessgrants/key_access_grants.proto",
}
